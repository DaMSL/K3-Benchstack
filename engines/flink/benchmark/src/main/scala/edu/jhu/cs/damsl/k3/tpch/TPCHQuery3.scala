/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This is Flink's example implementation of TPCH3 moved to a new package */
package edu.jhu.cs.damsl.k3.tpch

import edu.jhu.cs.damsl.k3.common.TPCHDeployment

import org.apache.flink.api.scala._
import org.apache.flink.core.fs.FileSystem.WriteMode

import org.apache.flink.api.java.aggregation.Aggregations

/**
 * This program implements a modified version of the TPC-H query 3. The
 * example demonstrates how to assign names to fields by extending the Tuple class.
 * The original query can be found at
 * [http://www.tpc.org/tpch/spec/tpch2.16.0.pdf](http://www.tpc.org/tpch/spec/tpch2.16.0.pdf)
 * (page 29).
 *
 * This program implements the following SQL equivalent:
 *
 * {{{
 * SELECT 
 *      l_orderkey, 
 *      SUM(l_extendedprice*(1-l_discount)) AS revenue,
 *      o_orderdate, 
 *      o_shippriority 
 * FROM customer, 
 *      orders, 
 *      lineitem 
 * WHERE
 *      c_mktsegment = '[SEGMENT]' 
 *      AND c_custkey = o_custkey
 *      AND l_orderkey = o_orderkey
 *      AND o_orderdate < date '[DATE]'
 *      AND l_shipdate > date '[DATE]'
 * GROUP BY
 *      l_orderkey, 
 *      o_orderdate, 
 *      o_shippriority;
 * }}}
 *
 * Compared to the original TPC-H query this version does not sort the result by revenue
 * and orderdate.
 *
 * Input files are plain text CSV files using the pipe character ('|') as field separator 
 * as generated by the TPC-H data generator which is available at 
 * [http://www.tpc.org/tpch/](a href="http://www.tpc.org/tpch/).
 * 
 */
object TPCHQuery3 {

  def main(args: Array[String]) {
    if (!parseParameters(args)) {
      return
    }

    // set filter date
    val dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd")
    val date = dateFormat.parse("1995-03-12")
    
    // get execution environment
    val env = ExecutionEnvironment.getExecutionEnvironment

    // read and filter lineitems by shipDate
    val lineitems = getLineitemDataSet(env).filter( l => dateFormat.parse(l.shipDate).after(date) )
    // read and filter customers by market segment
    val customers = getCustomerDataSet(env).filter( c => c.mktSegment.equals("AUTOMOBILE"))
    // read orders
    val orders = getOrdersDataSet(env)

                      // filter orders by order date
    val items = orders.filter( o => dateFormat.parse(o.orderDate).before(date) )
                      // filter orders by joining with customers
                      .join(customers).where("custId").equalTo("custId").apply( (o,c) => o )
                      // join with lineitems 
                      .join(lineitems).where("orderId").equalTo("orderId")
                                      .apply( (o,l) => 
                                        new ShippedItem( o.orderId,
                                                         l.extdPrice * (1.0 - l.discount),
                                                         o.orderDate,
                                                         o.shipPrio ) )

    // group by order and aggregate revenue
    val result = items.groupBy("orderId", "orderDate", "shipPrio")
                      .aggregate(Aggregations.SUM, "revenue")

    // emit result
    result.writeAsText(deployment.outputPath, WriteMode.OVERWRITE)
    
    // execute program
    val jobname = "Scala TPCH Q1"
    val jobresult = env.execute(jobname)
    print(jobname + " time: " + jobresult.getNetRuntime)
    print(jobname + " plan:\n" + env.getExecutionPlan())
  }
  
  // *************************************************************************
  //     USER DATA TYPES
  // *************************************************************************
  
  case class Lineitem(orderId: Long, extdPrice: Double, discount: Double, shipDate: String)
  case class Order(orderId: Long, custId: Long, orderDate: String, shipPrio: Long)
  case class Customer(custId: Long, mktSegment: String)
  case class ShippedItem(orderId: Long, revenue: Double, orderDate: String, shipPrio: Long)

  // *************************************************************************
  //     UTIL METHODS
  // *************************************************************************
  
  private def parseParameters(args: Array[String]): Boolean = {
    if (args.length == 2) {
      deployment = new TPCHDeployment(args(1), args(0))
      true
    } else {
      System.err.println("Usage: TPCHQuery3 <result path> <scale-factor>" )
      false
    }
  }
  
  private var deployment : TPCHDeployment = null
  private def getLineitemDataSet(env: ExecutionEnvironment): DataSet[Lineitem] = {
    env.readCsvFile[Lineitem](
        deployment.lineitemPath(deployment.scaleFactor),
        fieldDelimiter = "|",
        includedFields = Array(0, 5, 6, 10) )
  }

  private def getCustomerDataSet(env: ExecutionEnvironment): DataSet[Customer] = {
    env.readCsvFile[Customer](
        deployment.customerPath(deployment.scaleFactor),
        fieldDelimiter = "|",
        includedFields = Array(0, 6) )
  }
  
  private def getOrdersDataSet(env: ExecutionEnvironment): DataSet[Order] = {
    env.readCsvFile[Order](
        deployment.ordersPath(deployment.scaleFactor),
        fieldDelimiter = "|",
        includedFields = Array(0, 1, 4, 7) )
  }
  
}
